group array-nested-table;

import "TableCommon.stg"

arrayNestedTable(tableName, name, visitorClass, nestedTable, classes,
                 base, size, 
                 methods, id,  
                 columns, nestedColumns, nestedNestedColumns, gbColumns, gbNestedColumns, gbAggrColumn,
                 idxCols,
                 multiSet=false, isNested=false) ::= <<
<if(!isNested)>
package socialite.tables;

<importForTable()>
<endif>

// ArrayNestedTable
<if(!isNested)>public<endif> class <name> extends AbstractTableInst {
    private static final long serialVersionUID = 1;
    
    public static int tableid() { return <id>; }
    
    public static <name> create() { return new <name>(<base>, <size>); }
    public static <name> create(<first(columns).type> base, int size) { return new <name>(base, size); }
<if(IsInt.(first(columns).type))>
    public static <name> create(Integer base, Integer size) { return new <name>(base.intValue(), size.intValue()); }
<else>
    public static <name> create(Long base, Integer size) { return new <name>(base.longValue(), size.intValue()); }
<endif>

    <first(columns).type> base;
    AtomicByteArray filled;
    <rest(columns): {c|<c.type> col<i>[];<\n>}>
    <idxCols:{ic|SPosIndex index<ic.relPos>;<\n>}>
    <nestedTable>[] nestedTables;

    boolean isEmpty = true;
    
    public <name>() { }
    public <name>(<first(columns).type> _base, int size) {
        base = _base;
        filled = new AtomicByteArray(size);
        <rest(columns):{c|col<i>=new <if(c.arrayType)><c.compType>[size][]<else><c.type>[size]<endif>;<\n>}>;
        <idxCols:{ic|index<ic.relPos> = new SPosIndex();<\n>}>
        nestedTables = new <nestedTable>[size];
    }

<rest(columns):{c|private <c.type> col<i>(int i) {return col<i>[i];\}<\n>}>

    /** synchronization fields and methods */
    final static byte emptyMarker = -100, writeMarker = -1;
    void _lock(int i, byte marker) {
        assert marker \< 0;
        int count = 0, maxTry = 10;
        boolean locked = false;
        while (true) {
            locked = filled.compareAndSet(i, (byte)0, (byte)(emptyMarker + marker));
            if (locked) { break; }
            locked = filled.compareAndSet(i, (byte)1, (byte)marker);
            if (locked) { break; }
            if (count++ > maxTry) {
                count = 0;
                Thread.yield();
            }
        }
    }
    public void wlock(<first(columns).type> a) { _lock((int)(a-base), writeMarker); }
    public void wunlock(<first(columns).type> a) { filled.set((int)(a-base), (byte)1); }
    boolean requireLock(<first(columns).type> a) { return filled.get(a-base) \< 0; }
    void lock(<first(columns).type> a, <nestedTable> nested, <first(nestedColumns).type> b) {
        if (requireLock(a)) { nested.wlock(b); }
    }
    void unlock(<first(columns).type> a, <nestedTable> nested, <first(nestedColumns).type> b) {
        if (requireLock(a)) { nested.wunlock(b); }
    }

    boolean isEntryEmpty(int i) {
        int flag = filled.get(i);
        return (flag == 0 || flag \< emptyMarker);
    }


    public int size() { throw new UnsupportedOperationException(); }
    public boolean isEmpty() { return isEmpty; }
    public int id() { return <id>; }
    public String name() { return "<tableName>"; }
    
    public void clearQuick() { clear(); }

    public void clear() {
        filled.fill((byte)0);
        isEmpty = true;
        for (int i=0; i\<nestedTables.length; i++) {
            if (nestedTables[i]!=null) { nestedTables[i].clear(); }
        }
    }

    public int totalAllocSize() {
        int totalAlloc = 8+filled.length();
        <columns:{c|totalAlloc += 12+<c.typeSize>*filled.length();<\n>}>
        for (int i=0; i\<filled.length(); i++) {
            totalAlloc += nestedTables[i].totalAllocSize();
        }
        return totalAlloc;
    }

    void rangeCheck(<first(columns).type> i) {
        if (i\<0 || i>=nestedTables.length) {
            throw new SociaLiteException("Value out of range for <tableName> <first(columns).absPos>'th column: "+(i+base));
        }
    }
    public boolean contains_prefix(int n<rest(columns):{c|, <c.type> a<i>}>) {
        int i=(int)(n-base); rangeCheck(i);
        if (isEntryEmpty(i)) { return false; }

        if (true<rest(columns): {c|&&(col<i>(i)<EqOpMap.(c.type)>(a<i>))}>) {
            return true;
        } else { return false; }
    }
    public boolean contains(int n<rest(columns):{c|, <c.type> a<i>}><nestedColumns:{c|, <c.type> b<i>}>) {
        boolean contains_prefix=contains_prefix(n<rest(columns):{c|, a<i>}>);
        if (!contains_prefix) { return false; }

        int i=(int)(n-base);
        return nestedTables[i].contains(<nestedColumns:{c|b<i>}; separator=", ">);
    }
    public boolean contains(int n<rest(columns):{c|, <c.type> a<i>}><nestedColumns:{c|, <c.type> b<i>}>, boolean[] dontcare) {
        if (dontcare==null || dontcare[0]) {
            boolean contains=false;
            for (int i=0; i\<nestedTables.length; i++) {
                if (isEntryEmpty(i)) { continue; }
                if (true<rest(columns): {c|&& (dontcare[<i>] || col<i>(i)<EqOpMap.(c.type)>(a<i>))}>) {
                    contains = nestedTables[i].contains(<nestedColumns:{c|b<i>}; separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length));
                }
                if (contains) { return true; }
            }
            return false;
        }
        int i=(int)(n-base); rangeCheck(i);
        if (isEntryEmpty(i)) { return false; }

        <if(rest(columns))>
        if (<rest(columns): {c|(dontcare[<i>] || col<i>(i)<EqOpMap.(c.type)>(a<i>))}; separator="&& ">) {
            return nestedTables[i].contains(<nestedColumns:{t|b<i>}; separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length));
        } else { return false; }
        <else>
        return nestedTables[i].contains(<nestedColumns:{t|b<i>}; separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length));
        <endif>
    }

    public boolean insert(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|, <c.type> b<i>}>) {
    <if(!isNested && !multiSet)>
        if (contains(<columns:{c|a<i0>};separator=","><nestedColumns:{c|, b<i>}>)) return false;
    <endif>
        int i=(int)(a0-base); rangeCheck(i);

        if (!isEntryEmpty(i)) {
            if (!contains_prefix(<columns:{c|a<i0>};separator=",">)) {
                String msg = "Cannot insert the tuple {"+a0<rest(columns):{c|+","+a<i>}> +", ...} to <tableName>\n";
                 msg += "<tableName> already contains {"+a0<rest(columns):{c|+","+col<i>(i)}> +", ...} with the same 1st (array index) column\n";
                 throw new SociaLiteException(msg);
             }
        }
        if (isEmpty) { isEmpty = false; }

        <rest(columns): {c|col<i>[i] = a<i>;};separator="\n">

        <nestedTable> nested = nestedTables[i];
        if (nestedTables[i]==null) { nested = nestedTables[i] = <nestedTable>.create(); }
        lock(a0, nested, b1);
        nested.insert(<nestedColumns:{c|b<i>};separator=", ">);
        <idxCols:{ic|index<ic.relPos>.add(a<ic.relPos>, i);<\n>}>
        unlock(a0, nested, b1);
        filled.compareAndSet(i, (byte)0, (byte)1);
        return true;
    }

    public void iterate(<visitorClass> v) {
        if (isEmpty) { return; }
        for (int i=0; i\<nestedTables.length; i++) {
            if (!isEntryEmpty(i)) {
                boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
                if (cont) { nestedTables[i].iterate(v); }
            }
        }
    }
    public void iterate_by_<first(columns).absPos>(<first(columns).type> n, <visitorClass> v) {
        int i=(int)(n-base); rangeCheck(i);
        if (!isEntryEmpty(i)) {
            boolean cont=v.visit<columns:{c|_<c.absPos>}>(n<rest(columns):{c|, col<i>(i)}>);
            if (cont) { nestedTables[i].iterate(v); }
        }
    }

<idxCols:{c|
    public void iterate_by_<c.absPos>(<c.type> a, final <visitorClass> v) {
        ConcurrentReadIntArrayList indices = index<c.relPos>.get(a);
        if (indices == null) { return; \}
        for (int i=0; i\<indices.size(); i++) {
            boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
            if (cont) { nestedTables[i].iterate(v); \}
        \}
    <nestedColumns:{nc|<if(nc.indexed)>
        public void iterate_by_<c.absPos>_<nc.absPos>(<c.type> a, <nc.type> b, final <visitorClass> v) {
            ConcurrentReadIntArrayList indices = index<c.relPos>.get(a);
            if (indices == null) { return; \}
            for (int i=0; i\<indices.size(); i++) {
                boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
                if (cont) { nestedTables[i].iterate_by_<nc.absPos>(b, v); \}
        \}
        <endif>
        <if(nc.sorted)>
        public void iterate_part_from_<nc.absPos>_by_<c.absPos>(<c.type> a, final <nc.type> from, final boolean inclusive, <visitorClass> v) {
            ConcurrentReadIntArrayList indices = index<c.relPos>.get(a);
            if (indices == null) { return; \}
            for (int i=0; i\<indices.size(); i++) {
                boolean cont = v.visit(i+base<rest(columns):{c|,col<i>(pos)};separator=", ">);
                if (cont) { nestedTables[i].iterate_part_from_<nc.absPos>(<nc.type> from, final boolean inclusive, <visitorClass> v); \}
        \}
        public void iterate_part_to_<nc.absPos>_by_<c.absPos>(<c.type> a, final <nc.type> to, final boolean inclusive, <visitorClass> v) {
            ConcurrentReadIntArrayList indices = index<c.relPos>.get(a);
            if (indices == null) { return; \}
            for (int i=0; i\<indices.size(); i++) {
                boolean cont = v.visit(i+base<rest(columns):{c|,col<i>(pos)};separator=", ">);
                if (cont) { nestedTables[i].iterate_part_to_<nc.absPos>(<nc.type> from, final boolean inclusive, <visitorClass> v); \}
        \}
        <endif>
    }>
}>
    public void iterate_part_from_<first(columns).absPos>(<first(columns).type> from, boolean inclusive, <visitorClass> v) {
        int start =(int)(from-base); rangeCheck(start);
        for (int i=start; i\<nestedTables.length; i++) {
            if (!isEntryEmpty(i)) {
                boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
                if (cont) { nestedTables[i].iterate(v);}
            }
        }
    }
    public void iterate_part_to_<first(columns).absPos>(<first(columns).type> to, boolean inclusive, <visitorClass> v) {
        int end =(int)(to-base); rangeCheck(end);
        if (end > nestedTables.length-1) end = nestedTables.length-1;
        for (int i=0; i\<=end; i++) {
            if (!isEntryEmpty(i)) {
                boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
                if (cont) { nestedTables[i].iterate(v); }
            }
        }
    }

<nestedColumns:{c|
    <if(c.indexed)>
    public void iterate_by_<c.absPos>(<c.type> n, <visitorClass> v) {
        for (int i=0; i\<nestedTables.length; i++) {
            if (!isEntryEmpty(i)) {
                boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(i+base<rest(columns):{c2|, col<i>(i)}>);
                if (cont) nestedTables[i].iterate_by_<c.absPos>(n, v);
            \}
        \}
    \}
    public void iterate_by_<first(columns).absPos>_<c.absPos>(<first(columns).type> a0, <c.type> b0, <visitorClass> v) {
        int i=(int)(a0-base); rangeCheck(i);
        if (isEntryEmpty(i)) { return; \}

        boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(a0<rest(columns):{c2|, col<i>(i)}>);
        if (cont) { nestedTables[i].iterate_by_<c.absPos>(b0, v); \}
    \}
    <endif>
    <if(c.sorted)>
    public void iterate_part_from_<c.absPos>(<c.type> from, boolean inclusive, <visitorClass> v) {
        for (int i=0; i\<nestedTables.length; i++) {
            if (nestedTables[i]!=null && !nestedTables[i].isEmpty()) {
                boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(i+base<rest(columns):{c2|, col<i>(i)}>);
                if (cont) nestedTables[i].iterate_part_from_<c.absPos>(from, inclusive, v);
            \}
        \}
    \}
    public void iterate_part_to_<c.absPos>(<c.type> to, boolean inclusive, <visitorClass> v) {
        for (int i=0; i\<nestedTables.length; i++) {
            if (nestedTables[i]!=null && !nestedTables[i].isEmpty()) {
                boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(i+base<rest(columns):{c2|, col<i>(i)}>);
                if (cont) nestedTables[i].iterate_part_to_<c.absPos>(to, inclusive, v);
            \}
        \}
    \}
    public void iterate_part_from_<c.absPos>_by_<first(columns).absPos>(<first(columns).type> a0, <c.type> from, boolean inclusive, <visitorClass> v) {
        int i=(int)(a0-base); rangeCheck(i);
        if (nestedTables[i]==null) return;
        if (nestedTables[i].isEmpty()) return;

        boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(a0<rest(columns):{c2|, col<i>(i)}>);
        if (cont) nestedTables[i].iterate_part_from_<c.absPos>(from, inclusive, v);
    \}
    public void iterate_part_to_<c.absPos>_by_<first(columns).absPos>(<first(columns).type> a0, <c.type> to, boolean inclusive, <visitorClass> v) {
        int i=(int)(a0-base); rangeCheck(i);
        if (nestedTables[i]==null) return;
        if (nestedTables[i].isEmpty()) return;

        boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(a0<rest(columns):{c2|, col<i>(i)}>);
        if (cont) nestedTables[i].iterate_part_to_<c.absPos>(to, inclusive, v);
    \}
    <endif>
}>

    <methods;separator="\n">

    // groupby operations
<if(gbColumns)> // if(gbColumns) [
    <groupbyArrayNested()>
<endif> // ] if(gbColumns)
}
<classes; separator="\n">    
>>


groupbyArrayNested() ::= <<
<if(nestedNestedColumns)>
    static long shiftGroupby(long pos) { return pos \<\< (64-21); }
    static long composeGroupby(int pos, long offset) { return shiftGroupby(pos)|offset; }
    static int getGroupbyPos(long pos) { return (int)(pos >\>> (64-21)); }
    static long getGroupbyOffset(long pos) { return pos & 0x000007ffffffffffL; }
<else>
    static long shiftGroupby(long pos) { return pos \<\< 21; }
    static long composeGroupby(int pos, long offset) { return shiftGroupby(pos)|offset; }
    static int getGroupbyPos(long pos) { return (int)(pos >\>> 21); }
    static long getGroupbyOffset(long pos) { return pos & 0x00000000001fffffL; }
<endif>

<if(gbNestedColumns)> // if(gbNestedColumns) [
    public long groupby_getpos(<gbColumns:{c|<c.type> a<i0>};separator=", ">
                               <gbNestedColumns:{c|, <c.type> b<i0>}>) {
        int i=(int)(a0-base); rangeCheck(i);
        if (isEntryEmpty(i)) {
            return -1;
        } else if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>) {
            long offset = nestedTables[i].groupby_getpos(<gbNestedColumns:{c|b<i0>};separator=", ">);
            if (offset \< 0) { return -1; }
            return composeGroupby(i, offset);
        } else {
            throw new AssertionError("Unexpected groupby operation");
        }
    }
    public <gbAggrColumn.type> groupby_groupby(long pos) {
        int i = getGroupbyPos(pos);
        long offset = getGroupbyOffset(pos);
        return nestedTables[i].groupby_groupby(offset);
    }
    public boolean groupby_insert(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|,<c.type> b<i0>}>) {
        insert(<columns:{c|a<i0>};separator=","><nestedColumns:{c|,b<i0>}>);
        return true;
    }
    public boolean groupby_update(long pos<columns:{c|, <c.type> a<i0>}><nestedColumns:{c|, <c.type> b<i0>}>) {
        int i = getGroupbyPos(pos);
        long offset = getGroupbyOffset(pos);
        return nestedTables[i].groupby_update(offset<nestedColumns:{c|, b<i0>}>);
    }
    public void groupby_done(long pos) { return; }
<else> // if(!gbNestedColumns) [
    public long groupby_getpos(<gbColumns:{c|<c.type> a<i0>};separator=", ">) {
        int i=(int)(a0-base); rangeCheck(i);
        if (isEntryEmpty(i)) {
            return -1;
        } else if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>) {
            return (long)i;
        } else {
            throw new AssertionError("Unexpected groupby operation");
        }
    }
    public <gbAggrColumn.type> groupby_groupby(long pos) {
        return col<gbAggrColumn.relPos>[(int)pos];
    }
    public boolean groupby_insert(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|,<c.type> b<i0>}>) {
        insert(<columns:{c|a<i0>};separator=","><nestedColumns:{c|,b<i0>}>);
        return true;
    }
    public boolean groupby_update(long pos<columns:{c|, <c.type> a<i0>}><nestedColumns:{c|, <c.type> b<i0>}>) {
        int i = (int)post;
        <gbAggrColumn.type> aggr = col<gbAggrColumn.relPos>[i];
        if (aggr<EqOpMap.(gbAggrColumn.type)>(a<gbAggrColumn.relPos>)) {
            <rest(columns): {c|col<i>[i] = a<i>;};separator="\n">
            return nestedTables[i].groupby_update(offset<nestedColumns:{c|, b<i0>}>);
        } else {
            nestedTables[i].clear();
            <rest(columns): {c|col<i>[i] = a<i>;};separator="\n">
            return nestedTables[i].groupby_update(offset<nestedColumns:{c|, b<i0>}>);
        }
    }
    public void groupby_done(long pos) { return; }
<endif> // // ] gbNestedColumns
>>
